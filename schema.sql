CREATE TABLE EMPLOYEE (
                          id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,
                          name VARCHAR(100) NOT NULL,
                          password VARCHAR(100) NOT NULL
);

CREATE TABLE BUILDING (
                          id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,
                          name VARCHAR(100) NOT NULL
);

CREATE TABLE FLOOR (
                       id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,
                       building_id INTEGER NOT NULL,
                       floor VARCHAR(50) NOT NULL,
                       CONSTRAINT fk_floor_building FOREIGN KEY (building_id) REFERENCES BUILDING(id)
);

CREATE TABLE SEAT (
                      id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,
                      floor_id INTEGER NOT NULL,
                      name VARCHAR(50) NOT NULL,
                      status VARCHAR(20) NOT NULL, -- AVAILABLE, UNAVAILABLE, BROKEN
                      CONSTRAINT fk_seat_floor FOREIGN KEY (floor_id) REFERENCES FLOOR(id)
);

CREATE TABLE RESERVATION (
                             id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,
                             seat_id INTEGER NOT NULL,
                             employee_id INTEGER NOT NULL,
                             start_time TIMESTAMP NOT NULL,
                             end_time TIMESTAMP NOT NULL,
                             status VARCHAR(20) NOT NULL, -- PENDING, RESERVED, IN_USE, etc.
                             created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                             check_in_at TIMESTAMP,
                             extended_from_reservation_id INTEGER,
                             CONSTRAINT fk_reservation_seat FOREIGN KEY (seat_id) REFERENCES SEAT(id),
                             CONSTRAINT fk_reservation_employee FOREIGN KEY (employee_id) REFERENCES EMPLOYEE(id)
);

-- BUILDING
INSERT INTO building (name) VALUES
                                ('Main Tower'), ('Annex Tower'), ('HQ'), ('East Wing'), ('West Wing');

-- FLOOR
INSERT INTO floor (building_id, floor) VALUES
                                           (1, '1F'), (1, '2F'),
                                           (2, '1F'), (2, '2F'),
                                           (3, '1F'), (3, '2F'),
                                           (4, '1F'), (4, '2F'),
                                           (5, '1F'), (5, '2F');

-- EMPLOYEE
INSERT INTO employee (name, password)
SELECT 'Employee ' || nr, '123456' FROM unnest(sequence_array(1, 20, 1)) as i(nr);

-- SEAT: 10 seats mỗi floor → 10 * 10 = 100
INSERT INTO seat (floor_id, name, status)
SELECT f.id, 'S-' || f.id || '-' || nr,
       CASE
           WHEN MOD(nr, 10) = 0 THEN 'BROKEN'
           WHEN MOD(nr, 4) = 0 THEN 'UNAVAILABLE'
           ELSE 'AVAILABLE'
           END
FROM floor f, unnest(sequence_array(1, 10, 1)) as i(nr);

-- RESERVATION: sinh 100 bản ghi ngẫu nhiên
-- Trạng thái: xoay vòng giữa các trạng thái để dễ test

INSERT INTO reservation (seat_id, employee_id, start_time, end_time, status, created_at, check_in_at)
SELECT
    MOD(nr, 100) + 1, -- seat_id
    MOD(nr, 20) + 1,  -- employee_id
    TIMESTAMPADD(SQL_TSI_HOUR , MOD(nr, 48), CURRENT_TIMESTAMP), -- start_time: trong vòng 2 ngày
    TIMESTAMPADD(SQL_TSI_HOUR , MOD(nr, 48) + 2, CURRENT_TIMESTAMP), -- end_time: cách 2 giờ
    CASE MOD(nr, 7)
        WHEN 0 THEN 'PENDING'
        WHEN 1 THEN 'RESERVED'
        WHEN 2 THEN 'IN_USE'
        WHEN 3 THEN 'CANCELLED'
        WHEN 4 THEN 'COMPLETED'
        WHEN 5 THEN 'FORCED_CANCEL'
        ELSE 'NO_SHOW'
        END,
    CURRENT_TIMESTAMP,
    CASE WHEN MOD(nr, 7) IN (2,4,5) THEN TIMESTAMPADD(SQL_TSI_HOUR, MOD(nr, 48), CURRENT_TIMESTAMP)
         ELSE NULL
        END
FROM unnest(sequence_array(1, 100, 1)) as i(nr);


select
    S.ID, S.NAME, S.STATUS, F.FLOOR, B.NAME as BUIDING
from PUBLIC.SEAT S
         join PUBLIC.FLOOR F on F.ID = S.FLOOR_ID
         join PUBLIC.BUILDING B on B.ID = F.BUILDING_ID
where S.STATUS = 'AVAILABLE'
  and not exists (
    select
        1
    from PUBLIC.RESERVATION R
    where R.SEAT_ID = S.ID
      and r.STATUS in ('RESERVED', 'IN_USE')
      and (
        (R.START_TIME < '2025-05-27 23:12:28.726163')
            and
        (R.END_TIME > '2025-05-27 15:12:28.726163')
        )
)
order by S.ID
    limit 5
offset 0;


select
    R.ID, S.NAME as SEAT, TO_CHAR(R.START_TIME, 'HH24:MI') as START, TO_CHAR(R.END_TIME, 'HH24:MI') as END, R.START_TIME
from RESERVATION R
    join SEAT S on R.SEAT_ID = S.ID
    limit 5
offset 0;


select
    R.ID, S.NAME as SEAT,
    TO_CHAR(R.START_TIME, 'HH24:MI') as START_TIME,
    TO_CHAR(R.START_TIME, 'HH24:MI') as END_TIME,
    CAST(R.START_TIME as DATE) as DATE,
    F.FLOOR,
    B.NAME as BUILDING,
    R.STATUS
from RESERVATION R
    join SEAT S on R.SEAT_ID = S.ID
    join FLOOR F on F.ID = S.FLOOR_ID
    join BUILDING B on B.ID = F.BUILDING_ID
where R.EMPLOYEE_ID = 2;



select
    *
from SEAT S
         join FLOOR F on S.FLOOR_ID = F.ID
         join BUILDING B on F.BUILDING_ID = B.ID
where B.NAME = 'Main Tower' and F.FLOOR = '1F';


select * from BUILDING;

select
    F.ID, F.FLOOR
FROM FLOOR F
         join BUILDING B on F.BUILDING_ID = B.ID
where B.NAME = 'HQ';

