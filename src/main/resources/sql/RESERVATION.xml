<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"><mapper namespace="org.freezing.naive.repository.ReservationRepository">


	<select id="findById" resultType="org.freezing.naive.dto.Reservation">
		<![CDATA[
		SELECT
			*
		FROM
			RESERVATION R
		WHERE
			R.ID = #{reservationId}
		]]>
    </select>
    
    <select id="findInTime" resultType="org.freezing.naive.dto.Reservation">
		<![CDATA[
		SELECT
			*
		FROM
			RESERVATION R
		WHERE
			R.SEAT_ID = #{seatId}
			AND R.STATUS = 'IN_USE'
			AND R.START_TIME <= CURRENT_TIMESTAMP
			AND R.END_TIME >= CURRENT_TIMESTAMP
		]]>
    </select>
    
    <select id="hasTimeConflict" resultType="boolean">
		<![CDATA[
		SELECT
			COUNT(*) > 0
		FROM
			RESERVATION R
		WHERE
			R.SEAT_ID = #{seatId}
			AND R.STATUS IN ('IN_USE', 'RESERVED') 
			AND R.START_TIME <= #{endDateTime}
			AND R.END_TIME >= #{startDateTime}
		]]>
    </select>
    
    <select id="getUserReservedMinutesForDay" resultType="long">
		<![CDATA[
		SELECT 
			SUM(DATEDIFF('minute', START_TIME, END_TIME)) AS TOTAL_MINUTES
		FROM RESERVATION R
		WHERE 
			R.EMPLOYEE_ID = #{userId}
			AND R.STATUS IN ('RESERVED', 'IN_USE')
			AND CAST(START_TIME as DATE) = #{date}
		]]>
    </select>
    
    <select id="findByExtendedFromReservationId" resultType="org.freezing.naive.dto.Reservation">
		<![CDATA[
		SELECT
			*
		FROM
			RESERVATION R
		WHERE
			R.EXTENDED_FROM_RESERVATION_ID = ${extendedFromReservationId}
		]]>
    </select>

<select id="getReservationHistory" resultType="org.freezing.naive.dto.GetReservationHistoryOutDto">
		<![CDATA[
		    SELECT 
		    R.ID as RESERVATION_ID,
		    R.START_TIME,
		    R.END_TIME,
		    R.STATUS,
		    S.NAME as SEAT_NAME,
		    F.FLOOR, 
		    B.NAME as BUILDING_NAME
		FROM 
		    RESERVATION R 
		JOIN 
		    SEAT S ON R.SEAT_ID = S.ID 
		JOIN 
		    FLOOR F ON S.FLOOR_ID = F.ID 
		JOIN 
		    BUILDING B ON F.BUILDING_ID = B.ID 
		WHERE 
		    R.START_TIME < #{endTime} 
		    AND R.END_TIME > #{startTime}
		OFFSET #{skip}
		LIMIT ${limit}
		]]>
    </select>


	<select id="getOwnReservation" resultType="org.freezing.naive.dto.GetOwnReservationsOutDto">
		<![CDATA[
		SELECT
			R.ID as RESERVATION_ID,
			R.START_TIME,
			R.END_TIME,
			R.STATUS,
			S.NAME as SEAT_NAME,
			F.FLOOR,
			B.NAME as BUILDING_NAME,
			R.EXTENDED_FROM_RESERVATION_ID
		FROM
			RESERVATION R
				JOIN
			SEAT S ON R.SEAT_ID = S.ID
				JOIN
			FLOOR F ON S.FLOOR_ID = F.ID
				JOIN
			BUILDING B ON F.BUILDING_ID = B.ID
		WHERE
			R.EMPLOYEE_ID = #{employeeId}
			AND CAST(R.START_TIME AS DATE) >= CAST(SYSDATE AS DATE)
		]]>
    </select>

	<insert id="reserve" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO reservation (
			seat_id, employee_id, start_time, end_time, status, created_at
		) VALUES (
					 #{seatId}, #{employeeId}, #{startTime}, #{endTime}, #{status}, #{createdAt}
				 )
	</insert>
	
	<insert id="extend" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO reservation (
			seat_id, employee_id, start_time, end_time, status, created_at, check_in_at, extended_from_reservation_id 
		) VALUES (
					 #{seatId}, #{employeeId}, #{startTime}, #{endTime}, #{status}, #{createdAt}, #{checkInAt}, #{extendedFromReservationId}
				 )
	</insert>

	<update id="cancel">
		<![CDATA[
		UPDATE RESERVATION R SET R.STATUS = 'CANCELLED' WHERE R.ID = #{reservationId}
		]]>
	</update>

	<update id="setStatus">
		<![CDATA[
		UPDATE RESERVATION R SET R.STATUS = #{status} WHERE R.ID = #{reservationId}
		]]>
	</update>

</mapper>
